package com.example.backend.domain.chat.handler;

import com.example.backend.domain.chat.chatUser.repository.ChatUserRepository;
import com.example.backend.domain.chat.chatroom.entity.ChatRoom;
import com.example.backend.domain.chat.chatroom.repository.ChatRoomRepository;
import com.example.backend.global.redis.RedisService;
import java.util.Set;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Slf4j
@RequiredArgsConstructor
@Component
public class ChatRoomDeletionScheduler {

    private final RedisService redisService;
    private final ChatRoomRepository chatRoomRepository;
    private final ChatUserRepository chatUserRepository;

    @Scheduled(fixedRate = 600000) // 1Î∂ÑÎßàÎã§
    public void deleteExpiredChatRooms() {
        Set<String> roomIds = redisService.getDeletionRoomIds();

        log.info("ÏÇ≠Ï†ú ÏòàÏïΩ ÎåÄÏÉÅ Ï±ÑÌåÖÎ∞© ID Î™©Î°ù: {}", roomIds);

        for (String idStr : roomIds) {
            Long roomId = Long.valueOf(idStr);
            String key = "chatroom:deletion:" + roomId;
            Long ttl = redisService.getExpireSeconds(key);

            log.info("Ï±ÑÌåÖÎ∞© ID {}, ÎßåÎ£åÌÇ§ TTL: {}", roomId, ttl);

            if (ttl == null || ttl <= 0) {
                ChatRoom chatRoom = chatRoomRepository.findById(roomId).orElse(null);

                if (chatRoom != null) {
                    boolean isEmptyUsers = chatUserRepository.findByChatRoom(chatRoom).isEmpty();
                    log.info("Ï±ÑÌåÖÎ∞© ID {} Ï±ÑÌåÖ Ïú†Ï†Ä Ï°¥Ïû¨ Ïó¨Î∂Ä: {}", roomId, !isEmptyUsers);

                    if (isEmptyUsers) {
                        try {
                            chatRoomRepository.delete(chatRoom);
                            log.info("üóëÔ∏è Ï±ÑÌåÖÎ∞© {} ÏÇ≠Ï†ú ÏôÑÎ£å", roomId);
                        } catch (Exception e) {
                            log.error("Ï±ÑÌåÖÎ∞© {} ÏÇ≠Ï†ú Ïã§Ìå®", roomId, e);
                        }
                    } else {
                        log.info("Ï±ÑÌåÖÎ∞© {}Ïóê ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÏñ¥ ÏÇ≠Ï†úÌïòÏßÄ ÏïäÏùå", roomId);
                    }
                } else {
                    log.info("Ï±ÑÌåÖÎ∞© ID {}Î•º DBÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏùå", roomId);
                }

                redisService.removeRoomIdFromDeletionList(roomId);
                log.info("Ï±ÑÌåÖÎ∞© ID {} ÏÇ≠Ï†ú ÏòàÏïΩ Î™©Î°ùÏóêÏÑú Ï†úÍ±∞", roomId);
            }
        }

    }

}
